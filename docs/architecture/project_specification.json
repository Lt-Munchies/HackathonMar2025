{
  "project": {
    "name": "DevConnect",
    "version": "1.0.0",
    "description": "Developer Q&A Platform with AI Integration",
    "architecture": {
      "frontend": {
        "platform": "Android",
        "technology": "Kotlin",
        "main_components": {
          "screens": {
            "main_feed": {
              "components": [
                "Post List",
                "Search Bar",
                "Filter Options",
                "Create Post FAB"
              ],
              "features": [
                "Infinite Scroll",
                "Pull to Refresh",
                "Sort by Latest/Popular"
              ]
            },
            "post_detail": {
              "components": [
                "Post Content",
                "Code Blocks",
                "Comments Section",
                "Request AI Help Button"
              ],
              "features": [
                "Syntax Highlighting",
                "Copy Code Snippet",
                "Share Post",
                "AI Comment Generation"
              ],
              "code_block_features": {
                "syntax_highlighting": {
                  "enabled": true,
                  "theme": "github-dark",
                  "languages": [
                    "java", "kotlin", "python", "javascript", "typescript",
                    "html", "css", "json", "xml", "markdown", "sql"
                  ]
                },
                "ui_elements": [
                  "Copy Button",
                  "Line Numbers",
                  "Code Folding",
                  "Language Indicator"
                ]
              },
              "ai_comment_styling": {
                "visual_indicators": [
                  "AI Avatar Icon",
                  "Distinct Background Color: #F0F7FF"
                ],
                "colors": {
                  "background": "#F0F7FF",
                  "border": "#007AFF",
                  "icon_tint": "#007AFF"
                },
                "sections": [
                  "Solution Summary",
                  "Code Example",
                  "Explanation",
                  "Best Practices"
                ]
              }
            },
            "create_post": {
              "components": [
                "Title Input",
                "Description Editor",
                "Code Block Editor",
                "Programming Language Selector"
              ],
              "features": [
                "Code Formatting",
                "Preview Post",
                "Multiple Code Blocks"
              ]
            }
          }
        }
      },
      "backend": {
        "configuration": {
          "server": {
            "port": 8080,
            "cors": {
              "allowed_origins": ["*"],
              "allowed_methods": ["GET", "POST", "PUT", "DELETE"]
            }
          },
          "database": {
            "type": "h2",
            "mode": "in-memory",
            "name": "devconnect"
          },
          "swagger": {
            "enabled": true,
            "path": "/swagger-ui.html",
            "api_docs": "/v3/api-docs",
            "title": "DevConnect API",
            "description": "Developer Q&A Platform with AI Integration"
          },
          "application_properties": {
            "file": "src/main/resources/application.properties",
            "properties": {
              "server.port": "8080",
              "spring.h2.console.enabled": "true",
              "spring.h2.console.path": "/h2-console",
              "spring.datasource.url": "jdbc:h2:mem:devconnect",
              "spring.datasource.driverClassName": "org.h2.Driver",
              "spring.jpa.hibernate.ddl-auto": "create-drop",
              "azure.openai.api-key": "${AZURE_OPENAI_KEY}",
              "azure.openai.endpoint": "${AZURE_OPENAI_ENDPOINT}",
              "azure.openai.deployment": "${AZURE_OPENAI_DEPLOYMENT}",
              "# Logging configuration": "",
              "logging.level.root": "INFO",
              "logging.level.com.devconnect": "DEBUG",
              "logging.level.org.springframework.web": "DEBUG",
              "logging.level.org.hibernate": "ERROR",
              "logging.file.name": "logs/devconnect.log",
              "logging.pattern.console": "%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n",
              "logging.pattern.file": "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
            }
          },
          "logging": {
            "backend": {
              "console": {
                "enabled": true,
                "level": "DEBUG",
                "format": "colored and structured"
              },
              "file": {
                "enabled": true,
                "path": "logs/devconnect.log",
                "max_size": "10MB",
                "max_history": "7 days",
                "level": "DEBUG"
              },
              "key_loggers": [
                {
                  "name": "API Requests",
                  "path": "com.devconnect.controllers",
                  "events": [
                    "Request received",
                    "Response sent",
                    "Validation errors"
                  ]
                },
                {
                  "name": "AI Integration",
                  "path": "com.devconnect.services.ai",
                  "events": [
                    "AI request sent",
                    "AI response received",
                    "Errors and retries"
                  ]
                },
                {
                  "name": "Database Operations",
                  "path": "com.devconnect.repositories",
                  "events": [
                    "Query execution",
                    "Transaction status"
                  ]
                }
              ]
            }
          }
        },
        "api_structure": {
          "entities": {
            "User": {
              "fields": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "alias": {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 30
                },
                "createdAt": {
                  "type": "string",
                  "format": "ISO-8601",
                  "example": "2025-03-29T11:32:13+02:00"
                }
              }
            },
            "Post": {
              "fields": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "title": {
                  "type": "string",
                  "maxLength": 255,
                  "required": true,
                  "minLength": 1
                },
                "content": {
                  "type": "string"
                },
                "codeBlocks": [
                  {
                    "content": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "position": {
                      "type": "integer"
                    },
                    "required": false,
                    "metadata": {
                      "foldingRanges": [
                        {
                          "start": {
                            "type": "integer"
                          },
                          "end": {
                            "type": "integer"
                          },
                          "kind": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                ],
                "authorId": {
                  "type": "string",
                  "format": "UUID",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "authorAlias": {
                  "type": "string"
                },
                "createdAt": {
                  "type": "string",
                  "format": "ISO-8601",
                  "example": "2025-03-29T11:32:13+02:00"
                },
                "commentCount": {
                  "type": "integer"
                },
                "likes": {
                  "count": {
                    "type": "integer"
                  },
                  "reactions": {
                    "type": "enum",
                    "values": [
                      "HEART",
                      "THUMBS_UP",
                      "ROCKET"
                    ]
                  }
                }
              },
              "validation": {
                "title": {
                  "minLength": 1,
                  "maxLength": 255
                },
                "codeBlocks": {
                  "optional": true,
                  "noMaxLimit": true
                }
              }
            },
            "Comment": {
              "fields": {
                "id": {
                  "type": "string",
                  "format": "UUID",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "content": {
                  "type": "string"
                },
                "codeBlocks": [
                  {
                    "content": {
                      "type": "string"
                    },
                    "language": {
                      "type": "string"
                    },
                    "position": {
                      "type": "integer"
                    },
                    "metadata": {
                      "foldingRanges": [
                        {
                          "start": {
                            "type": "integer"
                          },
                          "end": {
                            "type": "integer"
                          },
                          "kind": {
                            "type": "string"
                          }
                        }
                      ]
                    }
                  }
                ],
                "authorId": {
                  "type": "string",
                  "format": "UUID",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "authorAlias": {
                  "type": "string"
                },
                "postId": {
                  "type": "string",
                  "format": "UUID",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "createdAt": {
                  "type": "string",
                  "format": "ISO-8601",
                  "example": "2025-03-29T11:32:13+02:00"
                },
                "isAiGenerated": {
                  "type": "boolean"
                },
                "aiMetadata": {
                  "type": "object",
                  "optional": true,
                  "properties": {
                    "model": {
                      "type": "string"
                    },
                    "promptContext": {
                      "type": "string"
                    }
                  }
                },
                "likes": {
                  "count": {
                    "type": "integer"
                  },
                  "reactions": {
                    "type": "enum",
                    "values": [
                      "HELPFUL",
                      "INSIGHTFUL"
                    ]
                  }
                }
              }
            }
          },
          "endpoints": {
            "posts": {
              "getPost": {
                "method": "GET",
                "path": "/api/posts/{postId}",
                "response": {
                  "post": "Post"
                },
                "success": "200 OK",
                "errors": {
                  "404": "Post not found"
                }
              },
              "getPosts": {
                "method": "GET",
                "path": "/api/posts",
                "params": {
                  "page": {
                    "type": "integer",
                    "default": 0,
                    "pageSize": 20
                  },
                  "sortBy": {
                    "type": "enum",
                    "values": [
                      "LATEST",
                      "MOST_LIKED"
                    ],
                    "default": "LATEST"
                  }
                },
                "response": {
                  "posts": "Post[]",
                  "totalPages": "integer",
                  "currentPage": "integer",
                  "hasNext": "boolean"
                },
                "success": "200 OK",
                "errors": {
                  "400": "Invalid page parameters",
                  "500": "Internal server error"
                }
              },
              "createPost": {
                "method": "POST",
                "path": "/api/posts",
                "body": "Post",
                "response": {
                  "id": {
                    "type": "string",
                    "format": "UUID",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                  },
                  "success": "boolean"
                },
                "success": "201 Created",
                "errors": {
                  "400": "Invalid post data",
                  "500": "Internal server error"
                }
              },
              "updatePost": {
                "method": "PUT",
                "path": "/api/posts/{postId}",
                "params": {
                  "authorId": {
                    "type": "string",
                    "required": true,
                    "description": "Must match the post author"
                  }
                },
                "body": {
                  "title": {
                    "type": "string",
                    "optional": true
                  },
                  "content": {
                    "type": "string",
                    "optional": true
                  },
                  "codeBlocks": {
                    "type": "array",
                    "optional": true
                  }
                },
                "response": {
                  "success": "boolean",
                  "post": "Post"
                },
                "success": "200 OK",
                "errors": {
                  "400": "Invalid update data",
                  "403": "Not the post author",
                  "404": "Post not found"
                }
              },
              "deletePost": {
                "method": "DELETE",
                "path": "/api/posts/{postId}",
                "params": {
                  "authorId": {
                    "type": "string",
                    "required": true,
                    "description": "Must match the post author"
                  }
                },
                "response": {
                  "success": "boolean"
                },
                "success": "200 OK",
                "errors": {
                  "403": "Not the post author",
                  "404": "Post not found"
                }
              }
            },
            "comments": {
              "getComments": {
                "method": "GET",
                "path": "/api/posts/{postId}/comments",
                "description": "Returns all comments for a post in a single request",
                "response": {
                  "comments": "Comment[]"
                },
                "success": "200 OK",
                "errors": {
                  "404": "Post not found"
                }
              },
              "createComment": {
                "method": "POST",
                "path": "/api/posts/{postId}/comments",
                "body": "Comment",
                "response": {
                  "id": {
                    "type": "string",
                    "format": "UUID",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                  },
                  "success": "boolean"
                },
                "success": "201 Created",
                "errors": {
                  "400": "Invalid comment data",
                  "404": "Post not found"
                }
              },
              "updateComment": {
                "method": "PUT",
                "path": "/api/posts/{postId}/comments/{commentId}",
                "params": {
                  "authorId": {
                    "type": "string",
                    "required": true,
                    "description": "Must match the comment author"
                  }
                },
                "body": {
                  "content": {
                    "type": "string",
                    "optional": true
                  },
                  "codeBlocks": {
                    "type": "array",
                    "optional": true
                  }
                },
                "response": {
                  "success": "boolean",
                  "comment": "Comment"
                },
                "success": "200 OK",
                "errors": {
                  "400": "Invalid update data",
                  "403": "Not the comment author",
                  "404": "Comment not found"
                }
              },
              "deleteComment": {
                "method": "DELETE",
                "path": "/api/posts/{postId}/comments/{commentId}",
                "params": {
                  "authorId": {
                    "type": "string",
                    "required": true,
                    "description": "Must match the comment author"
                  }
                },
                "response": {
                  "success": "boolean"
                },
                "success": "200 OK",
                "errors": {
                  "403": "Not the comment author",
                  "404": "Comment not found"
                }
              }
            },
            "aiResponses": {
              "generateAIComment": {
                "method": "POST",
                "path": "/api/posts/{postId}/ai-comment",
                "description": "Generates an AI response using Azure OpenAI REST API",
                "params": {
                  "codeBlockIndex": {
                    "type": "integer",
                    "optional": true
                  },
                  "specificQuestion": {
                    "type": "string",
                    "optional": true
                  }
                },
                "response": {
                  "commentId": {
                    "type": "string",
                    "format": "UUID",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                  }
                },
                "success": "201 Created",
                "errors": {
                  "400": "Invalid request parameters",
                  "404": "Post not found",
                  "500": "Internal server error",
                  "503": "AI service unavailable"
                },
                "error_response_format": {
                  "code": {
                    "type": "string"
                  },
                  "message": {
                    "type": "string"
                  },
                  "details": {
                    "type": "object",
                    "optional": true
                  }
                }
              }
            },
            "reactions": {
              "addReaction": {
                "method": "POST",
                "path": "/api/posts/{postId}/reactions",
                "params": {
                  "type": {
                    "type": "enum",
                    "values": [
                      "HEART",
                      "THUMBS_UP",
                      "ROCKET"
                    ],
                    "required": true
                  }
                },
                "response": {
                  "success": "boolean",
                  "newCount": "integer"
                },
                "success": "200 OK",
                "errors": {
                  "400": "Invalid reaction type",
                  "404": "Post not found",
                  "500": "Internal server error"
                }
              },
              "removeReaction": {
                "method": "DELETE",
                "path": "/api/posts/{postId}/reactions/{type}",
                "response": {
                  "success": "boolean",
                  "newCount": "integer"
                },
                "success": "200 OK",
                "errors": {
                  "404": "Post or reaction not found"
                }
              }
            },
            "alias": {
              "create": {
                "method": "POST",
                "path": "/api/alias",
                "body": {
                  "alias": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 30
                  }
                },
                "response": {
                  "userId": {
                    "type": "string",
                    "format": "UUID",
                    "example": "550e8400-e29b-41d4-a716-446655440000"
                  },
                  "alias": {
                    "type": "string"
                  }
                },
                "success": "201 Created",
                "errors": {
                  "400": "Invalid alias"
                }
              }
            }
          },
          "error_handling": {
            "global_error_format": {
              "timestamp": {
                "type": "string",
                "format": "ISO-8601"
              },
              "status": {
                "type": "integer"
              },
              "code": {
                "type": "string"
              },
              "message": {
                "type": "string"
              },
              "details": {
                "type": "object",
                "optional": true
              }
            },
            "common_errors": {
              "400": "Bad Request - Invalid parameters or payload",
              "404": "Not Found - Resource doesn't exist",
              "429": "Too Many Requests",
              "500": "Internal Server Error",
              "503": "Service Unavailable - AI service down"
            },
            "error_handling_strategy": {
              "client_side": {
                "network_errors": "Show retry option with exponential backoff",
                "validation_errors": "Show inline error messages",
                "server_errors": "Show user-friendly error message with refresh option"
              },
              "server_side": {
                "validation": "Return detailed validation errors",
                "ai_service": "Return specific AI service error details",
                "database": "Log detailed error, return generic message to client"
              }
            }
          },
          "integration": {
            "frontend_to_backend": {
              "protocol": "REST",
              "client": {
                "library": "Retrofit2",
                "features": [
                  "Coroutine support",
                  "JSON serialization (Moshi)",
                  "Type-safe API calls"
                ],
                "error_handling": {
                  "network_errors": "Result<T> wrapper",
                  "retry_policy": "exponential backoff"
                }
              },
              "data_format": "JSON",
              "base_url": "http://localhost:8080/api"
            }
          },
          "ai_service": {
            "provider": "Azure OpenAI",
            "model": {
              "name": "gpt-4",
              "version": "latest",
              "context": "You are an expert software engineer assistant. Provide clear, concise, and practical solutions. Focus on best practices, clean code, and maintainable solutions.",
              "prompt_template": {
                "structure": {
                  "context": "Given code or question context",
                  "task": "Specific task or question",
                  "requirements": [
                    "Keep responses focused and practical",
                    "Include code examples when relevant",
                    "Explain key decisions briefly",
                    "Suggest best practices"
                  ]
                },
                "max_length": "Determined by Azure OpenAI context window"
              }
            },
            "features": {
              "code_analysis": true,
              "solution_generation": true,
              "best_practices": true,
              "instant_generation": {
                "enabled": true,
                "loading_state": {
                  "indicator": "Progress Bar",
                  "message": "AI is analyzing your code..."
                },
                "timeout": "30 seconds"
              }
            },
            "response_format": {
              "structure": [
                "Problem Understanding",
                "Solution Code",
                "Detailed Explanation",
                "Additional Considerations"
              ],
              "styling": {
                "markdown": true,
                "syntax_highlighting": true,
                "code_blocks": {
                  "format": "fenced",
                  "language_indicator": true,
                  "line_numbers": true
                }
              }
            }
          },
          "local_development": {
            "prerequisites": {
              "backend": {
                "java": "JDK 21",
                "build_tool": "Maven 3.9+",
                "ide": "IntelliJ IDEA (recommended)"
              },
              "frontend": {
                "android_studio": "Latest version",
                "sdk": "Android SDK 34",
                "kotlin": "1.9+"
              }
            },
            "environment_variables": {
              "backend": {
                "AZURE_OPENAI_KEY": "Azure OpenAI API key",
                "AZURE_OPENAI_ENDPOINT": "Azure OpenAI endpoint URL",
                "AZURE_OPENAI_DEPLOYMENT": "GPT-4 deployment name",
                "SERVER_PORT": "8080 (default)"
              },
              "frontend": {
                "API_BASE_URL": "http://localhost:8080/api"
              }
            },
            "quick_start": {
              "backend": [
                "git clone <repository>",
                "cd backend",
                "copy .env.example .env (and fill in values)",
                "mvn clean install",
                "mvn spring-boot:run"
              ],
              "frontend": [
                "cd android",
                "copy local.properties.example local.properties",
                "Open in Android Studio",
                "Run on emulator or device"
              ]
            },
            "development_tools": {
              "recommended": [
                "Git",
                "Postman/Insomnia for API testing",
                "Android Studio",
                "IntelliJ IDEA"
              ],
              "optional": [
                "Docker Desktop",
                "WSL2 (for Windows users)"
              ]
            }
          },
          "project_structure": {
            "backend": {
              "root": "/backend",
              "main": {
                "java": "src/main/java/com/devconnect",
                "resources": "src/main/resources",
                "key_files": [
                  "application.properties",
                  ".env (for secrets)"
                ]
              },
              "packages": [
                "controllers",
                "models",
                "services",
                "config"
              ]
            },
            "frontend": {
              "root": "/android",
              "main": {
                "kotlin": "app/src/main/kotlin/com/devconnect",
                "res": "app/src/main/res"
              },
              "packages": [
                "ui",
                "data",
                "network",
                "util"
              ]
            }
          },
          "future_considerations": {
            "deployment": {
              "android": {
                "apk_generation": {
                  "build_type": "release",
                  "signing": "Need to generate keystore",
                  "distribution": "Direct APK share (for hackathon demo)"
                }
              }
            }
          }
        },
        "frontend": {
          "logging": {
            "android": {
              "debug_build": {
                "timber": {
                  "enabled": true,
                  "plant": "DebugTree",
                  "features": [
                    "Method names",
                    "Line numbers",
                    "Thread info"
                  ]
                },
                "logcat": {
                  "tag": "DevConnect",
                  "levels": [
                    "VERBOSE",
                    "DEBUG",
                    "INFO",
                    "WARN",
                    "ERROR"
                  ]
                },
                "file": {
                  "enabled": true,
                  "path": "DevConnect/logs",
                  "format": "yyyy-MM-dd_HH-mm-ss.log",
                  "max_files": 7
                }
              },
              "key_loggers": [
                {
                  "name": "Network",
                  "tag": "API",
                  "events": [
                    "Request start/end",
                    "Response success/error",
                    "Body content (in debug)"
                  ]
                },
                {
                  "name": "UI Events",
                  "tag": "UI",
                  "events": [
                    "View creation",
                    "User interactions",
                    "State changes"
                  ]
                },
                {
                  "name": "AI Integration",
                  "tag": "AI",
                  "events": [
                    "AI request lifecycle",
                    "Response processing",
                    "Error handling"
                  ]
                }
              ]
            }
          }
        }
      }
    }
  }
}