{
  "project_name": "DevConnect",
  "version": "1.0.0",
  "architecture": {
    "frontend": {
      "platform": "Android",
      "technology": "Kotlin",
      "main_components": {
        "screens": {
          "main_feed": {
            "components": [
              "Post List",
              "Search Bar",
              "Filter Options",
              "Create Post FAB"
            ],
            "features": [
              "Infinite Scroll",
              "Pull to Refresh",
              "Sort by Latest/Popular"
            ]
          },
          "post_detail": {
            "components": [
              "Post Content",
              "Code Blocks",
              "Comments Section",
              "Request AI Help Button"
            ],
            "features": [
              "Syntax Highlighting",
              "Copy Code Snippet",
              "Share Post",
              "AI Comment Generation"
            ],
            "code_block_features": {
              "syntax_highlighting": {
                "enabled": true,
                "theme": "github-dark",
                "languages": [
                  "java", "kotlin", "python", "javascript", "typescript",
                  "html", "css", "json", "xml", "markdown", "sql"
                ]
              },
              "ui_elements": [
                "Copy Button",
                "Line Numbers",
                "Code Folding",
                "Language Indicator"
              ]
            },
            "ai_comment_styling": {
              "visual_indicators": [
                "AI Avatar Icon",
                "Distinct Background Color: #F0F7FF"
              ],
              "colors": {
                "background": "#F0F7FF",
                "border": "#007AFF",
                "icon_tint": "#007AFF"
              },
              "sections": [
                "Solution Summary",
                "Code Example",
                "Explanation",
                "Best Practices"
              ]
            }
          },
          "create_post": {
            "components": [
              "Title Input",
              "Description Editor",
              "Code Block Editor",
              "Programming Language Selector"
            ],
            "features": [
              "Code Formatting",
              "Preview Post",
              "Multiple Code Blocks"
            ]
          }
        }
      }
    },
    "backend": {
      "api_structure": {
        "entities": {
          "User": {
            "fields": {
              "id": "string (UUID)",
              "alias": "string",
              "createdAt": "timestamp"
            }
          },
          "Post": {
            "fields": {
              "id": "string (UUID)",
              "title": {
                "type": "string",
                "maxLength": 255,
                "required": true
              },
              "content": "string",
              "codeBlocks": [{
                "content": "string",
                "language": "string",
                "position": "integer",
                "required": false
              }],
              "authorId": "string (UUID)",
              "authorAlias": "string",
              "createdAt": "timestamp",
              "likes": {
                "count": "integer",
                "reactions": {
                  "type": "enum",
                  "values": ["HEART", "THUMBS_UP", "ROCKET"]
                }
              }
            },
            "validation": {
              "title": {
                "minLength": 1,
                "maxLength": 255
              },
              "codeBlocks": {
                "optional": true,
                "noMaxLimit": true
              }
            }
          },
          "Comment": {
            "fields": {
              "id": "string (UUID)",
              "content": "string",
              "codeBlocks": [{
                "content": "string",
                "language": "string",
                "position": "integer"
              }],
              "authorId": "string (UUID)",
              "authorAlias": "string",
              "postId": "string (UUID)",
              "parentCommentId": "string (UUID, optional)",
              "createdAt": "timestamp",
              "isAIResponse": "boolean",
              "aiMetadata": {
                "model": "string",
                "prompt": "string",
                "timestamp": "timestamp"
              }
            }
          }
        },
        "endpoints": {
          "posts": {
            "getPosts": {
              "method": "GET",
              "path": "/api/posts",
              "params": {
                "page": {
                  "type": "integer",
                  "default": 0,
                  "pageSize": 20
                },
                "sortBy": {
                  "type": "enum",
                  "values": ["LATEST", "MOST_LIKED"],
                  "default": "LATEST"
                }
              },
              "response": {
                "posts": "Post[]",
                "totalPages": "integer",
                "currentPage": "integer",
                "hasNext": "boolean"
              },
              "errors": {
                "400": "Invalid page parameters",
                "500": "Internal server error"
              }
            },
            "searchPosts": {
              "method": "GET",
              "path": "/api/posts/search",
              "params": {
                "query": {
                  "type": "string",
                  "required": true,
                  "description": "Search in title, content, and code blocks"
                },
                "language": {
                  "type": "string",
                  "required": false,
                  "description": "Filter by programming language"
                },
                "page": {
                  "type": "integer",
                  "default": 0,
                  "pageSize": 20
                }
              },
              "response": {
                "posts": "Post[]",
                "totalPages": "integer",
                "currentPage": "integer",
                "hasNext": "boolean"
              },
              "errors": {
                "400": "Invalid search parameters",
                "500": "Internal server error"
              }
            },
            "createPost": {
              "method": "POST",
              "path": "/api/posts",
              "body": "Post"
            },
            "getPost": {
              "method": "GET",
              "path": "/api/posts/{postId}"
            },
            "updatePost": {
              "method": "PUT",
              "path": "/api/posts/{postId}",
              "body": "Post"
            },
            "deletePost": {
              "method": "DELETE",
              "path": "/api/posts/{postId}"
            }
          },
          "comments": {
            "getComments": {
              "method": "GET",
              "path": "/api/posts/{postId}/comments",
              "description": "Returns all comments for a post in a single request",
              "response": {
                "comments": "Comment[]"
              }
            },
            "createComment": {
              "method": "POST",
              "path": "/api/posts/{postId}/comments",
              "body": "Comment"
            }
          },
          "aiResponses": {
            "generateAIComment": {
              "method": "POST",
              "path": "/api/posts/{postId}/ai-comment",
              "description": "Generates an AI response using Azure OpenAI REST API",
              "params": {
                "codeBlockIndex": "integer (optional)",
                "specificQuestion": "string (optional)"
              },
              "response": {
                "commentId": "string (UUID)"
              },
              "errors": {
                "400": "Invalid request parameters",
                "404": "Post not found",
                "500": "Internal server error",
                "503": "AI service unavailable"
              },
              "error_response_format": {
                "code": "string",
                "message": "string",
                "details": "object (optional)"
              }
            }
          },
          "reactions": {
            "createReaction": {
              "method": "POST",
              "path": "/api/posts/{postId}/reactions",
              "body": {
                "type": "enum(HEART, THUMBS_UP, ROCKET)"
              }
            },
            "deleteReaction": {
              "method": "DELETE",
              "path": "/api/posts/{postId}/reactions/{reactionType}"
            }
          },
          "alias": {
            "create": {
              "method": "POST",
              "path": "/api/alias",
              "body": {
                "alias": "string"
              },
              "response": {
                "userId": "string (UUID)",
                "alias": "string"
              }
            }
          }
        }
      },
      "error_handling": {
        "global_error_format": {
          "timestamp": "ISO-8601 timestamp",
          "status": "HTTP status code",
          "code": "Application-specific error code",
          "message": "User-friendly error message",
          "details": "Additional error details (optional)"
        },
        "common_errors": {
          "400": "Bad Request - Invalid parameters or payload",
          "404": "Not Found - Resource doesn't exist",
          "429": "Too Many Requests",
          "500": "Internal Server Error",
          "503": "Service Unavailable - AI service down"
        },
        "error_handling_strategy": {
          "client_side": {
            "network_errors": "Show retry option with exponential backoff",
            "validation_errors": "Show inline error messages",
            "server_errors": "Show user-friendly error message with refresh option"
          },
          "server_side": {
            "validation": "Return detailed validation errors",
            "ai_service": "Return specific AI service error details",
            "database": "Log detailed error, return generic message to client"
          }
        }
      },
      "integration": {
        "frontend_to_backend": {
          "protocol": "REST",
          "client": {
            "library": "Retrofit2",
            "features": [
              "Coroutine support",
              "JSON serialization (Moshi)",
              "Type-safe API calls"
            ],
            "error_handling": {
              "network_errors": "Result<T> wrapper",
              "retry_policy": "exponential backoff"
            }
          },
          "data_format": "JSON",
          "base_url": "http://localhost:8080/api"
        }
      },
      "ai_service": {
        "provider": "Azure OpenAI",
        "model": {
          "name": "gpt-4",
          "version": "latest",
          "context": "You are an expert software engineer assistant. Provide clear, concise, and practical solutions. Focus on best practices, clean code, and maintainable solutions.",
          "prompt_template": {
            "structure": {
              "context": "Given code or question context",
              "task": "Specific task or question",
              "requirements": [
                "Keep responses focused and practical",
                "Include code examples when relevant",
                "Explain key decisions briefly",
                "Suggest best practices"
              ]
            },
            "max_length": "Determined by Azure OpenAI context window"
          }
        },
        "features": {
          "code_analysis": true,
          "solution_generation": true,
          "best_practices": true,
          "instant_generation": {
            "enabled": true,
            "loading_state": {
              "indicator": "Progress Bar",
              "message": "AI is analyzing your code..."
            },
            "timeout": "30 seconds"
          }
        },
        "response_format": {
          "structure": [
            "Problem Understanding",
            "Solution Code",
            "Detailed Explanation",
            "Additional Considerations"
          ],
          "styling": {
            "markdown": true,
            "syntax_highlighting": true,
            "code_blocks": {
              "format": "fenced",
              "language_indicator": true,
              "line_numbers": true
            }
          }
        }
      },
      "local_development": {
        "prerequisites": {
          "backend": {
            "java": "JDK 21",
            "build_tool": "Maven 3.9+",
            "ide": "IntelliJ IDEA (recommended)"
          },
          "frontend": {
            "android_studio": "Latest version",
            "sdk": "Android SDK 34",
            "kotlin": "1.9+"
          }
        },
        "environment_variables": {
          "backend": {
            "AZURE_OPENAI_KEY": "Azure OpenAI API key",
            "AZURE_OPENAI_ENDPOINT": "Azure OpenAI endpoint URL",
            "AZURE_OPENAI_DEPLOYMENT": "GPT-4 deployment name",
            "SERVER_PORT": "8080 (default)"
          },
          "frontend": {
            "API_BASE_URL": "http://localhost:8080/api"
          }
        },
        "quick_start": {
          "backend": [
            "git clone <repository>",
            "cd backend",
            "copy .env.example .env (and fill in values)",
            "mvn clean install",
            "mvn spring-boot:run"
          ],
          "frontend": [
            "cd android",
            "copy local.properties.example local.properties",
            "Open in Android Studio",
            "Run on emulator or device"
          ]
        },
        "development_tools": {
          "recommended": [
            "Git",
            "Postman/Insomnia for API testing",
            "Android Studio",
            "IntelliJ IDEA"
          ],
          "optional": [
            "Docker Desktop",
            "WSL2 (for Windows users)"
          ]
        }
      },
      "project_structure": {
        "backend": {
          "root": "/backend",
          "main": {
            "java": "src/main/java/com/devconnect",
            "resources": "src/main/resources",
            "key_files": [
              "application.properties",
              ".env (for secrets)"
            ]
          },
          "packages": [
            "controllers",
            "models",
            "services",
            "config"
          ]
        },
        "frontend": {
          "root": "/android",
          "main": {
            "kotlin": "app/src/main/kotlin/com/devconnect",
            "res": "app/src/main/res"
          },
          "packages": [
            "ui",
            "data",
            "network",
            "util"
          ]
        }
      },
      "future_considerations": {
        "deployment": {
          "android": {
            "apk_generation": {
              "build_type": "release",
              "signing": "Need to generate keystore",
              "distribution": "Direct APK share (for hackathon demo)"
            }
          }
        }
      }
    }
  }
}